=pod

=encoding UTF8

=head1 CONFIGURATION

Some tips on how to configure the Libris ILL backend.

=head2 System preferences

=head3 ILLModule

This must be set to "Enable" for the ILL module to work at all.

=head3 OpacHiddenItems

Use B<OpacHiddenItems> to hide the itemtypes given in B<ill_itemtype> and
B<ill_closed_itemtype> below from the OPAC. E.g.: "itype: [FJARRLAN, FJARRLANX]".

=head3 ILLHiddenRequestStatuses

Libraries that have a lot of ILL requests will soon get a very long table of
all requests, old and new, on the ILL main page. To work around this, closed
requests can be hidden with this syspref. Below is a list of all status codes.
IN_AVSL is probably the one you want to hide.

        IN_REM ........ Remitterad
        IN_UTEL ....... Uteliggande
        IN_LEV ........ Levererad
        IN_ANK ........ Ankomstregistrera
        IN_LAST ....... Läst
        IN_KANRES ..... Kan reserveras
        IN_MAK ........ Makulerad
        IN_NEG ........ Negativt svar
        IN_RES ........ Reservation
        IN_RESAD ...... Reserverad
        IN_RESPONSE ... Respondera
        IN_UTL ........ Utlånad
        IN_RET ........ Innleverad
        IN_AVBEST ..... Avbeställd
        IN_AVSL ....... Avsluta

(ILLHiddenRequestStatuses was added in version 20.11.00, bug 23391.)

=back

=head2 koha-conf.xml

In this file you need to make sure you have set up a section called 
interlibrary_loans for the ILL stuff to work at all. Inside this section, you
need to add the following element:

  <yazgfs>
    <config>
      <interlibrary_loans>
        ...
        <libris_config>/path/to/config.yaml</libris_config>
      </interlibrary_loans>
    <config>
  <yazgfs>

=head2 config.yaml

A config file in YAML format that should contain the following data:

=over 4

=item * B<libraries> - A hash of hashes, where the "Libris sigil" (The sigil or
identifier used to identify the library in Libris.) acts as the key, and the
following values should be present for each entry:

=over 4

=item * B<libris_key> - The API key for talking to the Libris API. Swedish
libraries can look this up when they are logged into Libris.

=back

=item * B<unknown_patron> - borrowernumber for a dummy patron that can be used
if a connection to a real patron can not be established.

=item * B<unknown_biblio> - biblionumber of a dummy record that can be used
if a connection to a real biblio can not be established.

=item * B<ill_branch> - Library to tie imported dta about libraries to.

=item * B<ill_itemtype> - When items are created for ILL documents, use this
itemtype.

=item * B<ill_closed_itemtype> - Use this itemtype when an ILL is marked as
done. If you do not want to differentiate between items that are done and
items that are not done, set this to the same value as ill_itemtype.

=item * B<libris_borrowernumber> - A "fake" patron that can be used to add
automatic ILL comments.

=item * B<ill_callnumber> - A standard callnumber that will be added to all
items created by the ILL processes.

=item * B<ill_notforloan> - A notforloan code that will be set on all
items created by the ILL processes. (Default 0.)

=item * B<update_library_data> - Data about ILL partner libraries is retrieved
from Libris. If a library has not been seen before, its data is saved as a new
patron in Koha. If update_library_data = 0, saved libraries are B<not> updated
when their data is fetched from Libris again. If update_library_data = 1, saved
libraries are updated.

=item * B<close_article_request_on_receive> - When an article/copy is received,
it can either be closed (record and item deleted, request anonymized) immediately
(close_article_request_on_receive = 1) or this can be left for later
(close_article_request_on_receive = 0). In the latter case, the request must be
manually closed ("Avslutad").

=item * B<patron_id_field> - The default way to identify a patron in Koha is to
use the user_id from the Libris data to look up patrons based on cardnumber, but
with this variable the backend can be told to use e.g. userid or borrowernumber.
If this variable is not included in the config, cardnumber will be used as the
default.

=item * B<patron_id_attributes> - I patron identifiers (like extra cardnumbers)
are stored as "extended patron attributes", a list of attribute codes can be
listed in this config variable, and patrons will be looked up based on these
attributes too, if a patron has not been found using the field in the 
patron_id_field. If this variable is not included in the config, only the field
specified by patron_id_field will be used to identify patrons.

=item * B<recordid_limit> - If the script that imports requests from Libris
fails somewhere between creating a record and recording the request in the DB,
a new copy of the same record might be added once every time F<get_data_from_libris.pl>
is run, resulting in possibly hundreds of copies of the same record. The script
will by default die if there are more than 100 copies of the record it is trying
to add. The threshold can be changed with this parameter.

=item * B<item_level_holds> - When a new request is added, a record and an item
is also added, and a hold is placed on the record for the requesting patron. If
this variable is set to 0 (or not set at all), the hold will be on the record
level. If this variable is set to 1, the hold will be an item level hold.

=item * B<date_due_period> - When an inter library loan is received, a guaranteed
loan period and maximum loan period is given. When the arrived copy is lent out,
the guaranteed, alternatively maximal loan period date shall automatically become
the due date/return date. Whether it is the guaranteed period or maximum loan period
that regulates the date of return can be decided in this configuration.
Valid values are I<due_date_guar> and I<due_date_max>.

=back

Example:

  ---
  
  libraries:
    Ab:
      libris_key: cde
    Fg:
      libris_key: hij
  libris_borrowernumber: 123
  unknown_patron: 1
  unknown_biblio: 2
  ill_branch: FJARRLAN
  ill_itemtype: FJARRLAN
  ill_closed_itemtype: FJARRLANX
  ill_callnumber: Fjärrlån
  update_library_data: 0
  close_article_request_on_receive: 0
  patron_id_field: userid
  recordid_limit: 25
  item_level_holds: 1
  date_due_period: due_date_guar
  reminders:
    Lån:
      - days_after: 0
        letter_code: ILL_ANK_L1
      - days_after: 14
        letter_code: ILL_ANK_L2
      - days_after: 21
        letter_code: ILL_ANK_L3
    Kopia:
      - days_after: 0
        letter_code: ILL_ANK_K1
      - days_after: 14
        letter_code: ILL_ANK_K2
      - days_after: 21
        letter_code: ILL_ANK_K3

=head2 Notices

Add notices with the following codes under Tools > Notices and slips:

=over 4

=item * B<ILL_ANK_LAN> - For books and other media that are borrowed and returned.

=item * B<ILL_ANK_LAN_REMINDERn> - For books and other media that patron has not yet retrieved,
n represents config.yaml reminders.Lån array index + 1 so that it is possible
to define any amount of reminders. Example: ILL_ANK_LAN_REMINDER1

=item * B<ILL_ANK_KOPIA> - For article copies that are not returned.

=item * B<ILL_ANK_KOPIA_REMINDERn> - For article copies that are not yet retrieved,
n represents config.yaml reminders.Kopia array index + 1 so that it is possible
to define any amount of reminders. Example: ILL_ANK_KOPIA_REMINDER1

=back

NOTE: The codes for these notices are hardcoded in the Libris backend, so the
notices have to ba created with exactly these codes.

The following settings should apply to all notices:

=over 4

=item * B<Library>: All libraries

=item * B<Koha module>: Circulation

=back

=head3 ILL_ANK_KOPIA - Email and print

  Hej, <<borrowers.firstname>> <<borrowers.surname>>!
  
  Din artikelkopia har ankommit till biblioteket:
  
  <<biblio.title>> av <<biblio.author>>
  
  Vänliga hälsningar
  Biblioteket

=head3 ILL_ANK_KOPIA_REMINDERn  - Email and print

  Hej, <<borrowers.firstname>> <<borrowers.surname>>!

  Din artikelkopia har ankommit till biblioteket:

  <<biblio.title>> av <<biblio.author>>

  Vänliga hälsningar
  Biblioteket

=head3 ILL_ANK_LAN - Email and print

  Hej, <<borrowers.firstname>> <<borrowers.surname>>!
  
  Ditt fjärrlån har ankommit till biblioteket:
  
  <<biblio.title>> av <<biblio.author>>
  
  Vänliga hälsningar
  Biblioteket

=head3 ILL_ANK_LAN_REMINDERn - Email and print

  Hej, <<borrowers.firstname>> <<borrowers.surname>>!

  Ditt fjärrlån har ankommit till biblioteket:

  <<biblio.title>> av <<biblio.author>>

  Vänliga hälsningar
  Biblioteket

=head2 Cron jobs

See "perldoc docs/cron.pod" for details.

=head2 Temporary hacks

=head3 Status graphs

Note: This has been solved as of versions 19.11.00 and 19.05.05!

On around line 526 of Koha/Illrequest.pm change this:

    foreach my $backend_status_key ( keys %{$backend_status_graph} ) {
        my $backend_status = $backend_status_graph->{$backend_status_key};
        # Add to new status graph
        $status_graph->{$backend_status_key} = $backend_status;
        # Update all core methods' next_actions.
        foreach my $prev_action ( @{$backend_status->{prev_actions}} ) {
            if ( grep $prev_action, @core_status_ids ) {
                my @next_actions =
                     @{$status_graph->{$prev_action}->{next_actions}};
                push @next_actions, $backend_status_key;
                $status_graph->{$prev_action}->{next_actions}
                    = \@next_actions;
            }
        }
        # Update all core methods' prev_actions
        foreach my $next_action ( @{$backend_status->{next_actions}} ) {
            if ( grep $next_action, @core_status_ids ) {
                my @prev_actions =
                     @{$status_graph->{$next_action}->{prev_actions}};
                push @prev_actions, $backend_status_key;
                $status_graph->{$next_action}->{prev_actions}
                    = \@prev_actions;
            }
        }
    }

into this:

    foreach my $backend_status_key ( keys %{$backend_status_graph} ) {
        my $backend_status = $backend_status_graph->{$backend_status_key};
        # Add to new status graph
        $status_graph->{$backend_status_key} = $backend_status;
        # Update all core methods' next_actions.
        foreach my $prev_action ( @{$backend_status->{prev_actions}} ) {
            if ( grep $prev_action, @core_status_ids ) {
                my @next_actions =
                     @{$status_graph->{$prev_action}->{next_actions}} if $status_graph->{$prev_action}->{next_actions};
                push @next_actions, $backend_status_key;
                $status_graph->{$prev_action}->{next_actions}
                    = \@next_actions;
            }
        }
        # Update all core methods' prev_actions
        foreach my $next_action ( @{$backend_status->{next_actions}} ) {
            if ( grep $next_action, @core_status_ids ) {
                my @prev_actions =
                     @{$status_graph->{$next_action}->{prev_actions}} if $status_graph->{$next_action}->{prev_actions};
                push @prev_actions, $backend_status_key;
                $status_graph->{$next_action}->{prev_actions}
                    = \@prev_actions;
            }
        }
    }

"Bug 22280 - The ILL module assumes every status needs a next/previous status"
L<https://bugs.koha-community.org/bugzilla3/show_bug.cgi?id=22280>.

=head2 Tips and tricks

=head3 Hide the "Create a new request" button in OPAC

Libris ILL does not allow patrons to create requests from the OPAC, so we can
just hide this button, by adding the following to the OPACUserCSS syspref:

  #ill-backend-dropdown { display: none; }

=head3 Hide some ILL metadata elements in the OPAC

Elements under "Details from library" can be hidden with OPACUserJS:

  .requestattr-Melding  { display: none; }
  .requestattr-Libris   { display: none; }

Elements under "Details from Libris" can be hidden with OPACUserCSS:

  $("label[for='backend']").parent().hide();
  $("label[for='medium']").parent().hide();
  $("label[for='placed']").parent().hide();

See also:

  Bug 22285 - OPAC shows too much info about ILL requests
  L<https://bugs.koha-community.org/bugzilla3/show_bug.cgi?id=22285>

=cut
